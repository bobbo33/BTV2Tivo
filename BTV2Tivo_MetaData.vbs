'BTV2Tivo_MetaData.vbs'v1.0 2009-08-11 Release'v1.1 2009-09-08 Replace MetaDataExtractor.exe with BTVMetaData.exe'                Add strServer optionally specified from command line'                Add time output from TargetStart''Extracts BTV metadata using BTV command line tools: http://forums.snapstream.com/vb/beyond-tv-downloads/44564-addon-btv-command-line-tools.html'then converts it to Tivo compatible metadata for use by StreamBaby: http://code.google.com/p/streambaby/wiki/getting_started'debugging disabled so it will continue to run when used as a scheduled jobboolDebug = falseIf boolDebug = false Then      On Error Resume NextEnd If'check for a valid command line inputIf WScript.Arguments.Count < 1 And boolDebug = true Then   MsgBox "Please input a valid filename."   WScript.QuitEnd If'check that the input file existsmpgFile = WScript.Arguments(0)Set objFSO = CreateObject("Scripting.FileSystemObject")If objFSO.FileExists(mpgFile) = False And boolDebug = true Then   MsgBox "File not found: " & vbNewLine & mpgFile   WScript.QuitEnd If'get server name as last argumentstrServer = WScript.Arguments(1)If Len(strServer) > 1 Then   strServer = "--server=" & strServerEnd IfSet objShell = CreateObject("WScript.Shell")objShell.CurrentDirectory = objFSO.GetParentFolderName(Wscript.ScriptFullName)intReturn = objShell.Run( "BTVMetaData.exe --mode=extract " & strServer & " """ & mpgFile & """", 0, True )Set objShell = Nothing'check that the xml file now existsbtvFile = Left(mpgFile,Len(mpgFile)-4) & ".xml"Set objFSO = CreateObject("Scripting.FileSystemObject")If objFSO.FileExists(btvFile) = False Then   MsgBox "File not found: " & vbNewLine & btvFile   WScript.QuitEnd If'create new metadata file in Tivo format'(see http://rutledgemanufacturing.com/pyTivo.aspx )Set objTivoFile = objFSO.CreateTextFile(mpgFile & ".txt", True)objTivoFile.WriteLine("seriesTitle : " & GetBTVProperty(btvFile,"Title"))objTivoFile.WriteLine("title : " & GetBTVProperty(btvFile,"DisplayText"))objTivoFile.WriteLine("description : " & GetBTVProperty(btvFile,"EpisodeDescription"))intStart = GetBTVProperty(btvFile,"TargetStart")If intStart>0 Then   dateTivo = DateAdd("h",intStart/36000000000 + 2, "1/1/1601") 'adjusted for GMT   strDateTivo = Year(dateTivo) & "-" & Month(dateTivo) & "-" & Day(dateTivo)   strTimeTivo = "T" & FormatDateTime(dateTivo,4) & ":00Z"   objTivoFile.WriteLine("time : " & strDateTivo & strTimeTivo)Else   strTimeTivo = "T02:00:00Z"End IfstrDate = GetBTVProperty(btvFile,"OriginalAirDate")If Len(strDate)=8 Then   strAirDateTivo = Left(strDate,4) & "-" & Mid(strDate,5,2) & "-" & Mid(strDate,7,2) & strTimeTivo   objTivoFile.WriteLine("originalAirDate : " & strAirDateTivo)End IfobjTivoFile.WriteLine("callsign : " & GetBTVProperty(btvFile,"StationCallsign"))objTivoFile.WriteLine("displayMajorNumber : " & GetBTVProperty(btvFile,"Channel"))strGenre = GetBTVProperty(btvFile,"Genre")arrGenre = Split(strGenre,"/")For i = 0 To UBound(arrGenre)   objTivoFile.WriteLine("vProgramGenre : " & Trim(arrGenre(i)))NextstrActors = GetBTVProperty(btvFile,"Actors")arrActors = Split(strActors,",")For i = 0 To UBound(arrActors)   objTivoFile.WriteLine("vActor : " & Trim(arrActors(i)))Next'clean up on exitobjTivoFile.CloseSet objTivoFile = NothingSet objFSO = NothingFunction GetBTVProperty(xmlSource,strProperty)   Set xmlDoc=CreateObject("Microsoft.XMLDOM")   xmlDoc.async = False   xmlDoc.setProperty "SelectionLanguage", "XPath"   intSuccess = xmlDoc.load(xmlSource)   If Not intSuccess Then      If boolDebug = true Then         strResult = "XML Error"      Else         strResult = ""      End If   Else      strQuery = "/episode-properties/property[@name='" & strProperty & "']"      strResult = xmlDoc.selectSingleNode(strQuery).Text   End If   Set xmlDoc = Nothing   GetBTVProperty = strResultEnd Function'not currently used - for development onlySub ListAllNodes(xmlSource)   Set xmlDoc=CreateObject("Microsoft.XMLDOM")   xmlDoc.async = False   xmlDoc.setProperty "SelectionLanguage", "XPath"   intSuccess = xmlDoc.load(xmlSource)   If Not intSuccess Then      If boolDebug = true Then         strResult = "XML Error"      Else         strResult = ""      End If   Else      Set xmlNodes = xmlDoc.selectNodes("/episode-properties/property")      For Each xmlNode In xmlNodes         strResult = strResult & xmlNode.Attributes.Item(0).Value & " : " & xmlNode.Text & vbNewLine      Next   End If   Set xmlDoc = Nothing   MsgBox strResultEnd Sub